name: Publish NPM Package

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          registry-url: 'https://registry.npmjs.org/'
      - name: Check version & Compare
        id: check-version
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          git fetch --tags
          git tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG=$(npm view "$PACKAGE_NAME" version 2>/dev/null || echo "v0.0.0")
          fi
          LATEST_VERSION=${LATEST_TAG#v}

          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
                echo "version_changed=true" >> $GITHUB_OUTPUT
                echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                echo "Version changed from $LATEST_VERSION to $CURRENT_VERSION"
          else
                echo "version_changed=false" >> $GITHUB_OUTPUT
                echo "No version change"
          fi

      - name: Set up pnpm
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm i
      - name: Build the package
        run: pnpm build
      - name: Publish to NPM 
        if: steps.check-version.outputs.version_changed == 'true'
        run: npm publish --access public --no-git-checks
        env:
            NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push Git Tag
        if: steps.check-version.outputs.version_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{steps.check-version.outputs.new_version}}" -m "Release v${{steps.check-version.outputs.new_version}}"
          git push origin "v${{steps.check-version.outputs.new_version}}"


          
          
